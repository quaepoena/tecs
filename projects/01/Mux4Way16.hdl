// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/01/Mux4Way16.hdl

/**
 * 4-way 16-bit multiplexor:
 * out = a if sel == 00
 *       b if sel == 01
 *       c if sel == 10
 *       d if sel == 11
 */

CHIP Mux4Way16 {
    IN a[16], b[16], c[16], d[16], sel[2];
    OUT out[16];

    PARTS:
    Not(in=sel[1], out=not-sel-1);
    Not(in=sel[0], out=not-sel-0);

    // out[0]
    And(a=not-sel-1, b=not-sel-0, out=and-a-0-0);
    And(a=and-a-0-0, b=a[0], out=and-a-0-1);

    And(a=not-sel-1, b=sel[0], out=and-b-0-0);
    And(a=and-b-0-0, b=b[0], out=and-b-0-1);

    And(a=sel[1], b=not-sel-0, out=and-c-0-0);
    And(a=and-c-0-0, b=c[0], out=and-c-0-1);

    And(a=sel[1], b=sel[0], out=and-d-0-0);
    And(a=and-d-0-0, b=d[0], out=and-d-0-1);

    Or(a=and-a-0-1, b=and-b-0-1, out=or-0-0);
    Or(a=and-c-0-1, b=and-d-0-1, out=or-0-1);

    Or(a=or-0-0, b=or-0-1, out=out[0]);

    // out[1]
    And(a=not-sel-1, b=not-sel-0, out=and-a-1-0);
    And(a=and-a-1-0, b=a[1], out=and-a-1-1);

    And(a=not-sel-1, b=sel[0], out=and-b-1-0);
    And(a=and-b-1-0, b=b[1], out=and-b-1-1);

    And(a=sel[1], b=not-sel-0, out=and-c-1-0);
    And(a=and-c-1-0, b=c[1], out=and-c-1-1);

    And(a=sel[1], b=sel[0], out=and-d-1-0);
    And(a=and-d-1-0, b=d[1], out=and-d-1-1);

    Or(a=and-a-1-1, b=and-b-1-1, out=or-1-0);
    Or(a=and-c-1-1, b=and-d-1-1, out=or-1-1);

    Or(a=or-1-0, b=or-1-1, out=out[1]);

    // out[2]
    And(a=not-sel-1, b=not-sel-0, out=and-a-2-0);
    And(a=and-a-2-0, b=a[2], out=and-a-2-1);

    And(a=not-sel-1, b=sel[0], out=and-b-2-0);
    And(a=and-b-2-0, b=b[2], out=and-b-2-1);

    And(a=sel[1], b=not-sel-0, out=and-c-2-0);
    And(a=and-c-2-0, b=c[2], out=and-c-2-1);

    And(a=sel[1], b=sel[0], out=and-d-2-0);
    And(a=and-d-2-0, b=d[2], out=and-d-2-1);

    Or(a=and-a-2-1, b=and-b-2-1, out=or-2-0);
    Or(a=and-c-2-1, b=and-d-2-1, out=or-2-1);

    Or(a=or-2-0, b=or-2-1, out=out[2]);

    // out[3]
    And(a=not-sel-1, b=not-sel-0, out=and-a-3-0);
    And(a=and-a-3-0, b=a[3], out=and-a-3-1);

    And(a=not-sel-1, b=sel[0], out=and-b-3-0);
    And(a=and-b-3-0, b=b[3], out=and-b-3-1);

    And(a=sel[1], b=not-sel-0, out=and-c-3-0);
    And(a=and-c-3-0, b=c[3], out=and-c-3-1);

    And(a=sel[1], b=sel[0], out=and-d-3-0);
    And(a=and-d-3-0, b=d[3], out=and-d-3-1);

    Or(a=and-a-3-1, b=and-b-3-1, out=or-3-0);
    Or(a=and-c-3-1, b=and-d-3-1, out=or-3-1);

    Or(a=or-3-0, b=or-3-1, out=out[3]);

    // out[4]
    And(a=not-sel-1, b=not-sel-0, out=and-a-4-0);
    And(a=and-a-4-0, b=a[4], out=and-a-4-1);

    And(a=not-sel-1, b=sel[0], out=and-b-4-0);
    And(a=and-b-4-0, b=b[4], out=and-b-4-1);

    And(a=sel[1], b=not-sel-0, out=and-c-4-0);
    And(a=and-c-4-0, b=c[4], out=and-c-4-1);

    And(a=sel[1], b=sel[0], out=and-d-4-0);
    And(a=and-d-4-0, b=d[4], out=and-d-4-1);

    Or(a=and-a-4-1, b=and-b-4-1, out=or-4-0);
    Or(a=and-c-4-1, b=and-d-4-1, out=or-4-1);

    Or(a=or-4-0, b=or-4-1, out=out[4]);

    // out[5]
    And(a=not-sel-1, b=not-sel-0, out=and-a-5-0);
    And(a=and-a-5-0, b=a[5], out=and-a-5-1);

    And(a=not-sel-1, b=sel[0], out=and-b-5-0);
    And(a=and-b-5-0, b=b[5], out=and-b-5-1);

    And(a=sel[1], b=not-sel-0, out=and-c-5-0);
    And(a=and-c-5-0, b=c[5], out=and-c-5-1);

    And(a=sel[1], b=sel[0], out=and-d-5-0);
    And(a=and-d-5-0, b=d[5], out=and-d-5-1);

    Or(a=and-a-5-1, b=and-b-5-1, out=or-5-0);
    Or(a=and-c-5-1, b=and-d-5-1, out=or-5-1);

    Or(a=or-5-0, b=or-5-1, out=out[5]);

    // out[6]
    And(a=not-sel-1, b=not-sel-0, out=and-a-6-0);
    And(a=and-a-6-0, b=a[6], out=and-a-6-1);

    And(a=not-sel-1, b=sel[0], out=and-b-6-0);
    And(a=and-b-6-0, b=b[6], out=and-b-6-1);

    And(a=sel[1], b=not-sel-0, out=and-c-6-0);
    And(a=and-c-6-0, b=c[6], out=and-c-6-1);

    And(a=sel[1], b=sel[0], out=and-d-6-0);
    And(a=and-d-6-0, b=d[6], out=and-d-6-1);

    Or(a=and-a-6-1, b=and-b-6-1, out=or-6-0);
    Or(a=and-c-6-1, b=and-d-6-1, out=or-6-1);

    Or(a=or-6-0, b=or-6-1, out=out[6]);

    // out[7]
    And(a=not-sel-1, b=not-sel-0, out=and-a-7-0);
    And(a=and-a-7-0, b=a[7], out=and-a-7-1);

    And(a=not-sel-1, b=sel[0], out=and-b-7-0);
    And(a=and-b-7-0, b=b[7], out=and-b-7-1);

    And(a=sel[1], b=not-sel-0, out=and-c-7-0);
    And(a=and-c-7-0, b=c[7], out=and-c-7-1);

    And(a=sel[1], b=sel[0], out=and-d-7-0);
    And(a=and-d-7-0, b=d[7], out=and-d-7-1);

    Or(a=and-a-7-1, b=and-b-7-1, out=or-7-0);
    Or(a=and-c-7-1, b=and-d-7-1, out=or-7-1);

    Or(a=or-7-0, b=or-7-1, out=out[7]);

    // out[8]
    And(a=not-sel-1, b=not-sel-0, out=and-a-8-0);
    And(a=and-a-8-0, b=a[8], out=and-a-8-1);

    And(a=not-sel-1, b=sel[0], out=and-b-8-0);
    And(a=and-b-8-0, b=b[8], out=and-b-8-1);

    And(a=sel[1], b=not-sel-0, out=and-c-8-0);
    And(a=and-c-8-0, b=c[8], out=and-c-8-1);

    And(a=sel[1], b=sel[0], out=and-d-8-0);
    And(a=and-d-8-0, b=d[8], out=and-d-8-1);

    Or(a=and-a-8-1, b=and-b-8-1, out=or-8-0);
    Or(a=and-c-8-1, b=and-d-8-1, out=or-8-1);

    Or(a=or-8-0, b=or-8-1, out=out[8]);

    // out[9]
    And(a=not-sel-1, b=not-sel-0, out=and-a-9-0);
    And(a=and-a-9-0, b=a[9], out=and-a-9-1);

    And(a=not-sel-1, b=sel[0], out=and-b-9-0);
    And(a=and-b-9-0, b=b[9], out=and-b-9-1);

    And(a=sel[1], b=not-sel-0, out=and-c-9-0);
    And(a=and-c-9-0, b=c[9], out=and-c-9-1);

    And(a=sel[1], b=sel[0], out=and-d-9-0);
    And(a=and-d-9-0, b=d[9], out=and-d-9-1);

    Or(a=and-a-9-1, b=and-b-9-1, out=or-9-0);
    Or(a=and-c-9-1, b=and-d-9-1, out=or-9-1);

    Or(a=or-9-0, b=or-9-1, out=out[9]);

    // out[10]
    And(a=not-sel-1, b=not-sel-0, out=and-a-10-0);
    And(a=and-a-10-0, b=a[10], out=and-a-10-1);

    And(a=not-sel-1, b=sel[0], out=and-b-10-0);
    And(a=and-b-10-0, b=b[10], out=and-b-10-1);

    And(a=sel[1], b=not-sel-0, out=and-c-10-0);
    And(a=and-c-10-0, b=c[10], out=and-c-10-1);

    And(a=sel[1], b=sel[0], out=and-d-10-0);
    And(a=and-d-10-0, b=d[10], out=and-d-10-1);

    Or(a=and-a-10-1, b=and-b-10-1, out=or-10-0);
    Or(a=and-c-10-1, b=and-d-10-1, out=or-10-1);

    Or(a=or-10-0, b=or-10-1, out=out[10]);

    // out[11]
    And(a=not-sel-1, b=not-sel-0, out=and-a-11-0);
    And(a=and-a-11-0, b=a[11], out=and-a-11-1);

    And(a=not-sel-1, b=sel[0], out=and-b-11-0);
    And(a=and-b-11-0, b=b[11], out=and-b-11-1);

    And(a=sel[1], b=not-sel-0, out=and-c-11-0);
    And(a=and-c-11-0, b=c[11], out=and-c-11-1);

    And(a=sel[1], b=sel[0], out=and-d-11-0);
    And(a=and-d-11-0, b=d[11], out=and-d-11-1);

    Or(a=and-a-11-1, b=and-b-11-1, out=or-11-0);
    Or(a=and-c-11-1, b=and-d-11-1, out=or-11-1);

    Or(a=or-11-0, b=or-11-1, out=out[11]);

    // out[12]
    And(a=not-sel-1, b=not-sel-0, out=and-a-12-0);
    And(a=and-a-12-0, b=a[12], out=and-a-12-1);

    And(a=not-sel-1, b=sel[0], out=and-b-12-0);
    And(a=and-b-12-0, b=b[12], out=and-b-12-1);

    And(a=sel[1], b=not-sel-0, out=and-c-12-0);
    And(a=and-c-12-0, b=c[12], out=and-c-12-1);

    And(a=sel[1], b=sel[0], out=and-d-12-0);
    And(a=and-d-12-0, b=d[12], out=and-d-12-1);

    Or(a=and-a-12-1, b=and-b-12-1, out=or-12-0);
    Or(a=and-c-12-1, b=and-d-12-1, out=or-12-1);

    Or(a=or-12-0, b=or-12-1, out=out[12]);

    // out[13]
    And(a=not-sel-1, b=not-sel-0, out=and-a-13-0);
    And(a=and-a-13-0, b=a[13], out=and-a-13-1);

    And(a=not-sel-1, b=sel[0], out=and-b-13-0);
    And(a=and-b-13-0, b=b[13], out=and-b-13-1);

    And(a=sel[1], b=not-sel-0, out=and-c-13-0);
    And(a=and-c-13-0, b=c[13], out=and-c-13-1);

    And(a=sel[1], b=sel[0], out=and-d-13-0);
    And(a=and-d-13-0, b=d[13], out=and-d-13-1);

    Or(a=and-a-13-1, b=and-b-13-1, out=or-13-0);
    Or(a=and-c-13-1, b=and-d-13-1, out=or-13-1);

    Or(a=or-13-0, b=or-13-1, out=out[13]);

    // out[14]
    And(a=not-sel-1, b=not-sel-0, out=and-a-14-0);
    And(a=and-a-14-0, b=a[14], out=and-a-14-1);

    And(a=not-sel-1, b=sel[0], out=and-b-14-0);
    And(a=and-b-14-0, b=b[14], out=and-b-14-1);

    And(a=sel[1], b=not-sel-0, out=and-c-14-0);
    And(a=and-c-14-0, b=c[14], out=and-c-14-1);

    And(a=sel[1], b=sel[0], out=and-d-14-0);
    And(a=and-d-14-0, b=d[14], out=and-d-14-1);

    Or(a=and-a-14-1, b=and-b-14-1, out=or-14-0);
    Or(a=and-c-14-1, b=and-d-14-1, out=or-14-1);

    Or(a=or-14-0, b=or-14-1, out=out[14]);

    // out[15]
    And(a=not-sel-1, b=not-sel-0, out=and-a-15-0);
    And(a=and-a-15-0, b=a[15], out=and-a-15-1);

    And(a=not-sel-1, b=sel[0], out=and-b-15-0);
    And(a=and-b-15-0, b=b[15], out=and-b-15-1);

    And(a=sel[1], b=not-sel-0, out=and-c-15-0);
    And(a=and-c-15-0, b=c[15], out=and-c-15-1);

    And(a=sel[1], b=sel[0], out=and-d-15-0);
    And(a=and-d-15-0, b=d[15], out=and-d-15-1);

    Or(a=and-a-15-1, b=and-b-15-1, out=or-15-0);
    Or(a=and-c-15-1, b=and-d-15-1, out=or-15-1);

    Or(a=or-15-0, b=or-15-1, out=out[15]);

}
